---
title: "Hands-on Exercise 6: Spatial Weights and Applications"
date: "13 February 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

In this Hands-on exercise, we will be computing spatial weights using functions from the **spdep** package.

# Installing and Loading R packages

Ensuring spdep, sf, tmap and tidyverse packages are installed

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

# Importing Data into R

## Geospatial Data

Geospatial data is in ESRI shapefile format. We will be using st_read() from sf package to import Hunan shapefile.

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

## Aspatial Data

We will import Hunan_2012.csv into R using read_csv() from readr package.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Performing Relational Join

We will now use left_join() to update hunan dataframe with hunan2012 attribute fields.

```{r}
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

# Visualisitng Regional Development Indicator

In this section, we will prepare a basemap and choropleth map displaying the distribution of GDP per capita (GDPPC) 2012 using qtm() from tmap package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan, "GDPPC")

tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# Computing Contiguity Spatial Weights

We will be using ply2nb() function from spdep package to computer contiguity weight matrices for the study area. It builds a neighbours list based on regions with contiguous boundaries.

From the documentation, we can pass in an argument called "queen" that takes in TRUE/FALSE as options. If the argument is not specified, by default it is set to TRUE, and it will use the Queen method to compute.

To use the Rook method, specify queen = FALSE.

## Computing contiguity based neighbours - QUEEN

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

-   There are 88 area units in Hunan
-   The most connected area unit has 11 neighbours
-   There are 2 area units with only 1 neighbour

For each polygon in our polygon object, wm_q lists all neighbouring polygons.

To see the neighbours for the first polygon in the object:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbours. The neighbours represent the polygon IDs as stored in the hunan data frame.

To retrieve the county name of Polygon ID = 1:

```{r}
hunan$County[1]
```

Polygon ID = 1 is Anxiang county.

To reveal the neighbouring polygons county names:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

Retrieving the GDPPC of these 5 counties

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.

Displaying the complete weight matrix using str():

```{r}
str(wm_q)
```

## Computing contiguity based neighbours - ROOK

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

-   There are 88 area units in Hunan
-   The most connected area unit has 10 neighbours
-   There are 2 area units with only 1 neighbour

## Visualising contiguity weights

Connectivity graphs will take a point and display a line to each neighbouring point. As we are currently working with polygons, we need to get points from the polygons in order to make the connectivity graphs. The most common method we will use is **polygon centroids**. First we will calculate these in the sf package before plotting the graphs.

We need points to associate with each polygon before making the connectivity graph. We cannot simply just run st_centroid on the sf object: us.bound. We need the coordinates to be in a separate data frame for this to work.

To this we will use a mapping function: - It applies a given function to each element of a vector and returns a vector of the same length. - Input vector: Geometry column of us.bound - Function: St_centroid - We will be using map_dbl variation of map from the purrr package

To get longitude values, map the st_centroid function over the geometry column of us.bound and access the longitude value through the double bracket notation and 1. This allows us to get only the longitude, the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude, but instead we access the second value for each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we can use cbind to put longitude & latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

### Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch=19, cex=0.6, add = TRUE, col="red")
```

### Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch=19, cex=0.6, add = TRUE, col="red")
```

### Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

# Computing distance based neighbours

In this section, we will be deriving distance based weight matrices using dnearneigh() of spdep package.

It identifies neighbours of region points by Euclidean distance with a distance band with lower d1= ad upper d2= bounds controlled by the bounds= argument.

If unprojected coordinates are used and either specified in the coordinates object x or with x as a 2 column matrix and longlat= TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

## Determining cut-off distance

First we have to determine the upper limit for the distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of k nearest neighbours of each other using knearnegh()
-   Convert the knn object returuned by knearneigh() into a neighbours list of class nb with a list of integer vecotrs containing neighbour region number ids using knn2nb()
-   Return the length of neighbour relationship edges using nbdists(). It returns in the units of the coordinates of the coordinates are projected, in km otherwise.
-   Remove the list structure of the returned object using unlist()

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The largest first neighbour distance is 61.79 km, so using this as the upper threshold will give certainty that all units will have at least 1 neighbour.

## Computing fixed distance weight matrix

Now we will compute the distance weight matrix by using dnearneigh()

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Average number of links: 3.681818 means that there are on average 4 neighbours

Displaying the content of wm_d62 weight matrix using str()

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine table() and card() of spdep

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

###Plotting Fixed distance weigh matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add= TRUE, col="red", length=0.08)
```

Red lines show the links of 1st nearest neighbours, black lines show the links of neighbours within the cut-off distance of 62km.

Plotting them separately next to each other:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add= TRUE, col = "red", length = 0.08, main= "1st nearest neighbour")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6, main = "Distance Link")
```

## Compoting adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (urban areas), tend to have more neighbours and less densely settled areas (rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the nuber of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours/ imposing symmetry (shown below).

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Displaying the content of knn6 matrix:

```{r}
str(knn6)
```

Each county now has 6 neighbours.

### Plotting Distance Based neighbours

Plotting weight matrix:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch=19, cex=0.6, add=TRUE, col="red")
```

# Weights Based on IDW

We will derive spatial weight matrix based on the Inversed Distance method.

First we will compute the distances between areas using nbdists()

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Row-standardised Weights Matrix

Next we need to assign weights to each neigbouring polygon. In our case, each neighbouring polygon will be assigned equal weight (style="W"). We do this by assigning the fraction 1/#ofneigbours to each neighbouring county then summing the weighted income values.

While this is the most intuitive way to summarise the neighbour's values it has one drawback that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over/under estimating the true nature of spatial autocorrection in the data.

In this example we will use style="W" option for simplicity sake but there are more robust options available (e.g. style="B")

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

zero.policy=TRUE options allows for lists of non-neighbours. This should be used with caution since the user may not be aware of missing neighbours in their dataset. However, a zero.policy of FALSE will return an error.

To see the weight of the first polygon's eight neighbours type:
```{r}
rswm_q$weights[10]
```
Each neighbour is assigned a 0.125 of the total weight, meaning that when R computes the average neighbouring income values, each neighbour's income will be multiplied by 0.2 before being tallied.

Using the same method, we can derive a row standardised weight matrix:
```{r}
rwsm_ids <- nb2listw(wm_q, glist = ids, style="B", zero.policy = TRUE)
rwsm_ids
```
```{r}
rwsm_ids$weights[1]
```
```{r}
summary(unlist(rwsm_ids$weights))
```
# Application of Spatial Weight Matrix

Creating 4 different spatial lagged variables.

## Spatial Lag with row-standardised weights

Now we will be computing the average GDPPC value for each polygon. These values are often referred to as spatially lagged values.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```
Retrieving GDPPC of the 5 neighbouring counties of polygon 1

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```
Appending the spatially lagged GDPPC values into hunan sf dataframe

```{R}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan, lag.res)
```
```{r}
head(hunan)
```
Now, we plot the GDPPC and spatial lag GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## Spatial Lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighbouring values by assigning binary weights. This requires us to go back to the neighbours list, then applying a function to assign binary weights, then using glist= in the nb2listw function to explicitly assign the weights.

We start by applying a function that assigns a value of 1 per each neighbour. This is done using lapply, which is used to manipulate the neighbours structure. Basically applies a function across each value in the neighbours structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q,
                       glist = b_weights,
                       style = "B")
b_weights2
```
With proper weights assigned, we can use lag.listw to compute lag variable from our weight and GDPPC

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

Appending lag_sum GDPPC field into hunan sf data frame

```{R}
hunan <- left_join(hunan, lag.res)
```
Comparing GDPPC and Spatial Lag Sum GDPPC

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use include.self() from spdep.

```{r}
wm_qs <- include.self(wm_q)
```

The Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909

```{r}
wm_qs[[1]]
```
Now [1] has six neighbours instead of 5

Obtaining weights:
```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```
Again, use nb2listw() and glist() to assign weight weight values.

Lastly, create the lag variable from out weight strucutre and GDPPC variable

```{r}
lag_w_avg_gdpc <- lag.listw(wm_qs, hunan$GDPPC)
lag_w_avg_gdpc
```
Next, convert the lag variable listw object into a data frame using as.data.frame().

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

NOTE: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.

Next, append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join().

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```
To compare the values of lag GDPPC and spatial window average, kable() of Knitr package is used to prepare a table:

```{r}
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```
Using qtm() to plot lag_gdppc and w_avg_gdppc maps for comparison

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## Spatial Window Sum

Sptial window sum is the counter part of the window average, but without row-standardised weights.

To add the diagonal element to the neighbour list, use include.self()

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```
Next, assign binray weights to the neighbour structure that includes diagonal element

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```
[1] has 6 neighbours instead of 5

Again, we use nb2listw() and glist() to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```
Computing lag variable

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```
Next, we will convert the lag variable listw object into a data.frame by using as.data.frame().

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Note: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.

Next, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```
```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```
```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

