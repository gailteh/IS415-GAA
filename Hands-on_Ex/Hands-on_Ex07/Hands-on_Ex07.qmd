---
title: "Hands-On Exercise 7: Global & Local Measures of Spatial Autocorrelation"
date: "19 February 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# Overview

In this exercise, we will be computing Global Spatial Auto Correlation and Local Indicator of Spatial Association (LISA) and also detect hot spot and cold spot areas.

# Getting Started

## Analytical QUestion

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be "is there sign of spatial clustering?". And, if the answer for this question is yes, then our next question will be "where are these clusters?"

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.

## Study Area and Data

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.
-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

## Loading and Installing R packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

# Getting Data in R Environment

## Importing shapefile into R

```{r}
hunan <- st_read(dsn= "data/geospatial",
                 layer = "Hunan")
```

## Importing csv fule into R

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Performing Relational Join

```{r}
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

## Viewing Regional Development Indicator

Creating a map to show the distribution of GDPPC 2012

```{r}
equal <- tm_shape(hunan) + 
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal Interval Classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal Quantile Classification")

tmap_arrange(equal,
             quantile,
             asp=1,
             ncol=2)
```

# Global Spatial Autocorrelation

In this section, we will compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.

## Computing Contiguity Spatial Weights

Before computing global spatial autocorrelations statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between geographical units in the study area.

We will use *poly2nb()* to compute contiguity weight matrices for the study area. It builds a neighbours list based on regions with contiguous boundaries.

If you look at the documentation you will see that you can pass a "queen" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

```{r}
wm_q <- poly2nb(hunan,
                queen = TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours

## Row Standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

While this is the most intuitive way to summarise the neighbors' values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons, thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q,
                   style="W",
                   zero.policy = TRUE)
rswm_q
```

The input of nb2listw() must be object of class **nb**. The syntax of the function takes in 2 arguments, style and zero.poly.

*style* can take values "W", "B", "C", "U", "minmax", and "S".

-   B is basic binary coding

-   W is row standardised (sums over all links to n)

-   C is globally standardised (sums over all links to n)

-   U is equal to C divided by the number of neighbours (sums over all links to unity)

-   S is the variance stabilising coding scheme (sums over all links to n)

If zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbours in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

#Global Spatial Autocorrelation: Moran's I Test

In this section, we will perform Moran's I statistics testing using moran.test() from spdep.

## Moran's I Test

Performing Moran's I statistical testing:

```{r}
moran.test(hunan$GDPPC,
           listw = rswm_q,
           zero.policy = TRUE,
           na.action = na.omit)
```

**What statistical conclusions can be drawn from the output?**

Since the p-value which is 1.095e-06 is much smaller than the alpha value 0.001, we can reject the null hypothesis at 99.9% confidence interval.

Since Moral I statistic is 0.300749970 is \> 0 and is approaching 1 (indicating positive autocorrelation), we can infer that the spatial patterns we observe resemble a cluster.

## Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran's I statistic by using moran.mc() of spdep. A total of 1000 simulations will be performed.

```{r}
set.seed(1234)
bperm = moran.mc(hunan$GDPPC,
                 listw = rswm_q,
                 nsim = 999,
                 zero.policy = TRUE,
                 na.action = na.omit)
bperm
```

**What statistical conclusions can be drawn from the output?**

p-value after 1000 simulations is 0.001, which is equal to alpha value 0.001. Hence, we accept the null hypothesis at confidence interval 99.9%.

Since the monte carlo statistic 0.30075 \> 0 and approaching 1 (positive autocorrelation), we can infer the spatial patterns we observe resemble a cluster.

## Visualising Monte Carlo Moran's I

It is good practice to examine the simulated Moran's I test statistics in greater detail. We can do this by plotting the distribution of the statistical values as a histogram. We will use *hist()* and *abline()* of R graphics.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res,
     freq = TRUE,
     breaks = 20,
     xlab = "Simulated Moran's I")
abline(v=0, col="red")
```

The distribution is right skewed.

Instead of using Base Graph to plot the values, use the ggplot2 packager

```{r}
#first, convert to a dataframe
bperm_df <- as.data.frame(bperm$res)

ggplot(data = bperm_df,
       aes(x= as.numeric(`bperm$res`))) +
  geom_histogram(bins=20,
                 colour="black",
                 fill="white") +
  geom_vline(aes(xintercept=0),
             colour="red", linetype="dashed",size=1) +
  labs(title = "Distribution of Monte Carlo Moran's I statistics",
       x = "Simulated Moran's I",
       y = "Frequency")
```

# Global Spatial Autocorrelation: Geary's

## Geary's C test

Using geary.test() of spdep to perform Geary's C test for spatial autocorrelation.

```{r}
geary.test(hunan$GDPPC, listw = rswm_q)
```

The p-value is 0.0001526, which is smaller than alpha value 0.001. Hence we will rejct the null hypothesis at 99.9 confidence interval.

Since the Geary C statistic 0.6907223 is \< 1, we can infer that the spatial patterns we observe resemble a cluster.

## Computing Monte Carlo Geary's C

Performing the permutation test for Geary's C statistic using geary.mc().

```{r}
set.seed(1234)
bperm = geary.mc(hunan$GDPPC,
                 listw = rswm_q,
                 nsim = 999)
bperm
```

The p-value is 0.001 after 1000 simulations, which is equal to our alpha value 0.001. Hence, we accept the null hypothesis at confidence interval 99.9%.

Since the Geary's C statistic 0.69072 is \< 1, we can infer that the spatial patterns we observe resemble a cluster.

## Visualising the Monte Carlo Geary's C

Now we will plot a histogram to reveal the distribution of the simulated values.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq = TRUE, breaks = 20, xlab = "Simulated Geary C")
abline(v=1, col="red")
```

We can observe that the distribution follows a normal distribution.

# Spatial Correlogram

Spatial correlograms are used to examine patterns of spatial autocorrelation in the data or model residuals. They show how correlated are pairs of spatial observations when we increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.

Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

## Computing Moran's I Correlogram

sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation ussed is Moran's I. After that we will use plot() to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q,
                          hunan$GDPPC,
                          order = 6,
                          method = "I",
                          style = "W")
plot(MI_corr)
```

Plotting the output may not provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence we need to examine the full analysis report by printing out the analysis results.

```{r}
print(MI_corr)
```

## Computing Geary's C correlogram and plot

```{r}
GC_corr <- sp.correlogram(wm_q,
                          hunan$GDPPC,
                          order = 6,
                          method = "C",
                          style = "W")
plot(GC_corr)
```

Similar to above, we will print the analysis report.

```{r}
print(GC_corr)
```

# Cluster and Outlier Analysis

Local Indicators of Spatial Association (LISA) are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance, if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.

In this section, we will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran's I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.

## Computing Local Moran's I

To compute Local Moran's I, we will use localmoran() function. It computes *li* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

Computing local Moran's I of GDPPC2012 at the county level:

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

localmoran() returns a matrix of values whose columns are: - *Ii*: local Moran's statistics - *E.Ii*: Expectation of local moran statistic under the randomisation hypothesis - Var.Ii: Variance of local moran statistic under randomisation hypothesis - Z.Ii: Standard deviate of local moran statistic - Pr(): p-value of local moran statistic

Using printCoefmat() to list the content of the local Moran matrix derived:

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```

### Mapping Local Moran's I

Before mapping the local Moran's I map, it is wise to append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.

```{r}
hunan.localMI <- cbind(hunan, localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

### Mapping Local Moran's I values

We can use choropleth mapping functions from tmap to plot local Moran's I values.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

### Mapping Local Moran's I p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col="Pr.Ii",
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1,Inf),
          palette = "-Blues",
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

### Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col="Pr.Ii",
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1,Inf),
          palette = "-Blues",
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

# Creating a LISA cluster map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

## Plotting Moran Scatterplot

Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute and neighbouring locations. We use moran.plot() to plot the scatterplot.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels =as.character(hunan$County),
                  xlab = "GDPPC 2012",
                  ylab = "Spatially Lag GDPPC 2012")
```

Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations.

## Plotting Moran scatterplot with standardised variable

First we will use scale() to center and scale the variable. Here, centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviation.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>%
  as.vector
```

as.vector() added at the end makes sure that the data type we get out of this is a vector, that maps neatly into our dataframe.

Now, we can plot the Moran scatterplot again.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab = "z-GDPPC 2012",
                   ylab = "Spatially Lag z-GDPPC 2012")
```

## Preparing LISA Map Classes

```{r}
quadrant <- vector(mode = "numeric", length = nrow(localMI))

# derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)

# centering the local Moran's around the mean
LM_I <- localMI[,1] - mean(localMI[,1])

#setting a statistical significance level for local moran
signif <- 0.05

#define the low-low (1), low-high (2), high-low (3) and high-high (4) categories
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4

#place non-significant moran in category 0
quadrant[localMI[,5]>signif] <- 0
```

##Plotting LISA Map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) + 
  tm_fill(col = "quadrant",
          style = "cat",
          palette = colors[c(sort(unique(quadrant)))+1],
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha = 0.5)
```

For effective interpretation, it is better to plot both local Moran's I values map and its corresponding p-values map next to each other

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) + 
  tm_fill(col = "quadrant",
          style = "cat",
          palette = colors[c(sort(unique(quadrant)))+1],
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, LISAmap, asp = 1, ncol = 2)
```

# Hot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

The term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.

## Getis and Ord's G-statistics

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics.It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

3 steps to this analysis:

1.  Deriving spatial weight matrix

2.  Computing Gi statistics

3.  Mapping Gi statistics

## Deriving Distance-based weight matrix

First we need to define a new set of neighbours. While the spatial autocorrelation considered units which shared borders, for Getis-Ord we define neighbours based on distance.

2 types of distance based proximity matrix:

-   fixed distance

-   adaptive distance

This section will be fixed-distance weight matrix.

### Deriving Centroid

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running *st_centroid()* on the sf object: **us.bound**.

We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package.

To get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])

# do the same for latitide but access the second value in each centroid
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])

# using cbind to put longitude and latitude into the same object
coords <- cbind(longitude, latitude)
```

### Determining cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using *knearneigh()* of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using *knn2nb()*.

-   Return the length of neighbour relationship edges by using *nbdists()* of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using **unlist()**.

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### Computing Fixed distance weight matrix

We will compute distance weight matrix using dnearneigh()

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = "B")
summary(wm62_lw)
```

## Computing Adaptive Distance Weight Matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = "B")
summary(knn_lw)
```

## Computing Gi statistics

### Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The output of localG() is a vector of G or Gstar values, with attributes \"gstari\" set to TRUE or FALSE, \"call\" set to the function call, and class \"localG\".

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Next, we will join the Gi values to their corresponding hunan sf data frame.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

What the code above does:

-   First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*.

-   Next, *cbind()* is used to join hunan\@data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*.

-   Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

### Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### Gi statistics using adaptive distance

Computing Gi values for GDPPC2012 using an adapative distance weight matrix.

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

Now we can visualise the locations of hot spot and cold spot areas. We can use tmap to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
