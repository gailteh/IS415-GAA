---
title: "In-Class Exercise 11"
date: "27 March 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# Loading Packages

```{r}
pacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)
```

# Preparing Flow Data

## Importing OD Data

First we will import Passenger Volume by Origin Destination Bus Stops data set.

```{r}
odbus <- read.csv("data/aspatial/origin_destination_bus_202210.csv")
```

Upon examining the data, the values in ORIGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type. We need to convert them into factor data type.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

## Extracting Study Area

We will be extracting commuting flows on weekdays between 7 and 9 o'clock.

```{r}
odbus7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Writing the saved output into rds format for future use:

```{r}
write_rds(odbus7_9,
          "data/rds/odbus7_9")
```

```{r}
odbus7_9 <- read_rds("data/rds/odbus7_9")
```

# Geospatial Data

## importing geospatial data

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

## Geospatial Data Wrangling

Populating planning subzone code from mpsz dataframe into bus stop dataframe.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

Note: busstop_mpsz has 5 lesser records than busstop because those busstops are in JB out of Singapore.

Next we will append origin bustop's planning subzone code from buststop_mpsz into odbus7_9.

```{r}
od_data <- left_join(odbus7_9, busstop_mpsz,
                      by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
            rename(ORIGIN_BS = ORIGIN_PT_CODE,
                   ORIGIN_SZ = SUBZONE_C,
                   DESTIN_BS = DESTINATION_PT_CODE
            )
```

Checking for duplicates

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

We can retain the unique records to remove duplicates

```{r}
od_data <- unique(od_data)
```

To check again, re-run the code to create duplicate df. Now there are 0 duplicated records.

Joining destination bustop subzone to od_data:

```{r}
od_data <- left_join(od_data, busstop_mpsz,
                     by = c("DESTIN_BS" = "BUS_STOP_N"))
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na()
```

Saving output into rds:

```{r}
write_rds(od_data, "data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

## Visualising Geospatial Data

```{r}
tmap_mode("plot")
qtm(mpsz)
```

# Isolating SUBZONE_C into a new dataframe

Sorting subzone code in alphabetical order:

```{r}
mpsz <- mpsz[order(mpsz$SUBZONE_C),]
head(mpsz,10)
```

# Computing Distance Matrix

## Converting from sf to sp

```{r}
mpsz_sp <- as(mpsz, "Spatial")
```

## Computing Distance Matrix

```{r}
dist <- spDists(mpsz_sp)
dist
```

```{r}
sz_names <- mpsz$SUBZONE_C
```

## Attaching SUBZONE_C to row and col for distance matrix matching

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

## Pivoting distance value by SUBZONE_C

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

## Update intra-zonal distances

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()  
```

A constant distance value of 50m is added into intra-zones (for those with dist 0). We use 50 because min distance is 173.8 m.

```{r}
# If dist value is equal to 0, change it to 50. Else, no change.
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

```{r}
# Aggregating trips data at subzone level (summing the num of trips within subzone levels)
flow_data <- od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(TRIPS = sum(TRIPS))
```

# Importing Population Data

```{r}
pop <- read_csv("data/aspatial/pop.csv")
```

```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   SZ = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

```{r}
#updating flow data with pair distances
flow_data1 <- flow_data %>%
  left_join(distPair,
            by = c("ORIGIN_SZ" = "orig",
                   "DESTIN_SZ" = "dest"))
```

```{r}
# appending population data to flow_data1 (origin)
flow_data1 <- flow_data1 %>% 
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

```{r}
# appending population data to flow_data1 (destination)
flow_data1 <- flow_data1 %>% 
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```
