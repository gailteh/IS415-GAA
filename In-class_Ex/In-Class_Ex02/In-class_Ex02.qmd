---
title: "In-Class Exercise 2: Geospatial Data Wrangling"
date: "`r Sys.Date()`"
format: html
execute: 
  message: false
  warning: false
  editor: visual
---

# Installing and loading sf, tidyverse, funModeling packages

```{r}
pacman::p_load(sf, tidyverse,funModeling)
```

# Handling Geospatial Data

## Importing Geospatial Data

### Importing geoBoundaries data set

```{r}
geoNGA <- st_read("data/geospatial/",
                  layer = 
                  "geoBoundaries-NGA-ADM2") %>%
  st_transform(crs = 26392)
```

### Importing NGA data set

```{r}
NGA <- st_read("data/geospatial/",
                  layer = 
                  "nga_admbnda_adm2_osgof_20190417") %>%
  st_transform(crs = 26392)
```

## Importing Aspatial Data Set

Importing the water point data set and selecting only the water points within Nigeria

```{r}
wp_nga <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

Converting wkt data into sfc

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
wp_nga
```

Converting wp_nga tibble data frame into sf data frame, then transforming into Nigeria PCS

```{r}
wp_sf <- st_sf(wp_nga, crs=4326) %>%
  st_transform(crs = 26392)
wp_sf
```

# Geospatial Data Cleaning

## Excluding Redundant Fields

Retaining column 3,4,8 and 9

```{r}
NGA <- NGA %>%
  select(c(3:4, 8:9))
```

## Checking for duplicate name

Flag out LGA names that are duplicated

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)== TRUE]
```

Correcting the errors of duplicate names

```{r}
NGA$ADM2_EN[94] <- "Bassa, Kogi"
NGA$ADM2_EN[95] <- "Bassa, Plateau"
NGA$ADM2_EN[304] <- "Ifelodun, Kwara"
NGA$ADM2_EN[305] <- "Ifelodun, Osun"
NGA$ADM2_EN[355] <- "Irepodun, Kwara"
NGA$ADM2_EN[356] <- "Irepodun, Osun"
NGA$ADM2_EN[519] <- "Nasarawa, Kano"
NGA$ADM2_EN[520] <- "Nasarawa, Nasarawa"
NGA$ADM2_EN[546] <- "Obi, Benue"
NGA$ADM2_EN[547] <- "Obi, Nasarawa"
NGA$ADM2_EN[693] <- "Surulere, Lagos"
NGA$ADM2_EN[694] <- "Surulere, Oyo"
```

Checking that there are no more duplicate

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)== TRUE]
```

# Data Wrangling for Water Point Data

Using freq() from funModeling package to show the distribution of water point status visually

```{r}
freq(data = wp_sf,
     input = '#status_clean')
```
rename() renames the column from #status_clean to status_clean, using select() to include status_clean in the output dataframe, mutate() and replace_na() are used to recode NA values into "unknown"

```{r}
wp_sf_nga <- wp_sf %>%
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
  status_clean, "unknown"))
```

## Extracting Water Point Data

Extracting functional water points

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

Extracting non-functional water points

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

Extracting water points with unknown status

```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

Peforming EDA on the derived dataframes

```{r}
freq(data = wp_functional,
     input = "status_clean")
```
```{r}
freq(data = wp_nonfunctional,
     input = "status_clean")
```
```{r}
freq(data = wp_unknown,
     input = 'status_clean')
```

## Point-in-polygon count

To find the number of total, functional, nonfunctional, and unknown water points in each LGA.

st_intersects() identifies all the water points for each type, then length() is used to calculate the number of water points for each type

```{r}
NGA_wp <- NGA %>%
  mutate(`total_wp` = lengths(
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA, wp_unknown)))
```

## Plotting distribution of total waterpoints in a histogram

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) +
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
              colour="red",
              linetype="dashed",
              size = 0.8) +
  ggtitle("Distribution of total water points by LGA") + 
  xlab("No. of water points") +
  ylab("No. of\nLGAs") +
  theme(axis.title.y= element_text(angle = 0))
```

## Exporting NGA_wp data frame into rds format

Retaining the sf object structure for subsequent analysis in the future.

```{r}
write_rds(NGA_wp, "data/rds/NGA_wp.rds")
```
