---
title: "In-Class Exercise 6: Spatial Weights - sfdep methods"
date: "13 February 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# Overview

This in-class exercise uses an alternative R package to the **spdep** package used in Hands-on Ex 6, called **sfdep**.

# Installing and Loading R Packages

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse)
```

# Data

## Importing Geospatial Data

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

## Importing Aspatial Data

Importing Hunan_2012.csv into a tibble data frame

```{r}
hunan_2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Combining both data frame by using left join

In order to retain the geospatial property, the left data frame must be the sf data frame.

```{r}
hunan_GDPPC <- left_join(hunan, hunan_2012) %>%
  select(1:4, 7, 15)

# normally we have to specify which common field to do the join
# R is case sensitive, we need to check if the cases match (or else they will not join)
# After joining, we retain columns 1-4, 7 and 15 of the joined dataframe only
```

## Plotting a choropleth map

```{r}
tmap_mode("plot")
tm_shape(hunan_GDPPC)+
  tm_fill("GDPPC",
          style="quantile",
          palette = "Blues",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per capita by district, Hunan Province",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type = "8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

# Contiguity Spatial Weights

There are 2 types of spatial weights: **contiguity weights** and **distance-based weights**. In this section, we will use sfdep to derive contiguity spatial weights.

Two steps required to derive contiguity spatial weights:

1.  Identifying contiguity neighbour list by [`st_contiguity()`](https://sfdep.josiahparry.com/reference/st_contiguity.html) of **sfdep** package

2.  Deriving the contiguity spatial weights by using [`st_weights()`](https://sfdep.josiahparry.com/reference/st_weights.html) of **sfdep** package

In this section, we will learn how to derive the contiguity neighbour list and contiguity spatial weights separately. Then, we will learn how to combine both steps into a single process.

## Identifying Contiguity Neighbours (Queen's Method)

st_contiguity() derives a contiguity neighbour list using Queen's method (queen method by default, do not need to specify)

```{r}
nb_queen <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)

# mutate creates a new field called nb which is the contiguity neighbour list
# .before = 1 will create the new field as the first column
```

```{r}
summary(nb_queen$nb)
```

There are 88 area units in Hunan, the most connected area has 11 neighbours, and there are 2 units with only one neighbour.

Viewing the content of the data table:

```{r}
nb_queen
```

Polygon 1 has 5 neighbours, polygon numbers 2, 3, 4, 57 and 85.

Getting the county names of the neighbouring polygons:

```{r}
nb_queen$County[c(2,3,4,57,85)]
```

## Identifying Contiguity Neighbours (Rook's Method)

```{r}
nb_rook <- hunan_GDPPC %>%
  mutate(nb= st_contiguity(geometry,
                           queen = FALSE),
         .before=1)
```

Note: Bishop method does not exist for sfdep (only in spdep)

## Identifying Higher Order Neighbours

Sometimes we need to identify high order contiguity neighbours. To do this, we should use st_nb_lag_cumul().

```{r}
nb2_queen <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         nb2 = st_nb_lag_cumul(nb, 2),
         .before = 1)
nb2_queen
```

If the order is 2, the result will contain both 1st and 2nd order neighbours as shown above.

# Computing contiguity weights

Now, we will compute contiguity weights using st_weights().

## Queen's Method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
# can combine the steps of creating the contiguity neighbour list together with computing the contiguity weights

# In the sfdep package
```

**Arguments in `st_weights()`**

-   nb: A neighbor list object as created by st_neighbors().

-   style: Default "W" for row standardized weights. This value can also be "B", "C", "U", "minmax", and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   allow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.

```{r}
wm_q
```

## Rook's Method

```{r}
wm_r <- hunan %>%
  mutate(nb = st_contiguity(geometry, queen = FALSE),
         wt = st_weights(nb),
         .before = 1)
wm_r
```

# Distance-Based Spatial Weights

Now, we will learn how to derive the 2nd type of spatial weights, distance-based. There are 3 popularly used distance-based spatial weights:

-   Fixed Distance Weights

-   Adaptive Distance Weights

-   Inverse Distance Weights

## Deriving Fixed Distance Weights

Before deriving fixed distance weights, we have to determine the upper limit for the distance band:

```{r}
geo <- sf::st_geometry(hunan_GDPPC)
nb <- st_knn(geo, longlat = TRUE)
dists <- unlist(st_nb_dists(geo, nb))
```

::: callout-note
## Things to note

-   `st_nb_dist()` is used to calculate the nearest neighbour distance. The output is a list of distances for each observation's neighbour list

-   `unlist()` is used to return the output as a vector so that the summary statistics of the nearest neighbour distances can be derived
:::

Now, we will go ahead to derive summary statistics of the nearest neighbour distances vector (dists)

```{r}
summary(dists)
```

The maximum nearest neighbour distnace is 65.80km. By using a threshold value of 66, we will ensure that each area will have at least 1 neighbour.

Now, we will compute the fixed distance weights:

```{r}
wm_fd <- hunan_GDPPC %>%
  mutate(nb = st_dist_band(geometry, upper = 66),
         wt = st_weights(nb),
         .before = 1)
wm_fd
```

::: callout-note
## Things to note

-   `st_dists_band()` of sfdep is used to identify neighbors based on a distance band (i.e. 66km). The output is a list of neighbours (i.e. nb).

-   `st_weights` is used to calculate polygon spatial weights of the nb list. Note:

    -   default style is set to W for row standardised weights

    -   default allow_zero is set to TRUE, assigns zero as lagged value to zones without neighbours
:::

## Deriving Adaptive Distance Weights

```{r}
wm_ad <- hunan_GDPPC %>%
  mutate(nb = st_knn(geometry, k = 8),
         wt = st_weights(nb),
         .before = 1)
wm_ad
```

::: callout-note
## Things to Note

`st_knn()` is used to identify neighbours based on k. k indicates the nearest k neighbours. The outpur is a list of neighbours (nb)
:::

## Deriving Inverse Distance Weights

```{r}
wm_idw <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
wm_idw
```

::: callout-note
## Things to note

st_contiguity identifies the neighbours using contiguity criteria, the output is a list of neighbours.
:::
